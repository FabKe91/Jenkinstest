<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.9.6 on darwin)" generated="20230310 17:36:57.542" rpa="false" schemaversion="3">
<suite id="s1" name="Transaction Testsuite" source="/Users/Fabian.Keller/Projects/WLP/prototype/transaction_testsuite.robot">
<test id="s1-t1" name="Send Valid Transaction" line="16">
<kw name="Trigger Transaction" library="TRXLibrary">
<arg>TEST</arg>
<status status="PASS" starttime="20230310 17:36:57.556" endtime="20230310 17:36:57.556"/>
</kw>
<kw name="Result Should Be" library="TRXLibrary">
<arg>TEST</arg>
<doc>Verifies that the current result is ``expected``.</doc>
<status status="PASS" starttime="20230310 17:36:57.556" endtime="20230310 17:36:57.556"/>
</kw>
<tag>TES-11</tag>
<status status="PASS" starttime="20230310 17:36:57.556" endtime="20230310 17:36:57.556"/>
</test>
<doc>Example test cases using the keyword-driven testing approach.

All tests contain a workflow constructed from keywords in
``TRXLibrary.py``. Creating new tests or editing
existing is easy even for people without programming skills.

The _keyword-driven_ appoach works well for normal test
automation, but the _gherkin_ style might be even better
if also business people need to understand tests. If the
same workflow needs to repeated multiple times, it is best
to use to the _data-driven_ approach.</doc>
<status status="PASS" starttime="20230310 17:36:57.543" endtime="20230310 17:36:57.556"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">TES-11</stat>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Transaction Testsuite">Transaction Testsuite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
